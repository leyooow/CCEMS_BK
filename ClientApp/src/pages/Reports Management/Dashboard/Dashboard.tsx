import React, { useEffect, useState } from 'react';
import Tabs from '@mui/material/Tabs';
import Tab from '@mui/material/Tab';
import Box from '@mui/material/Box';
import PaginationControls from '../../../components/Pagination/PaginationControls';
import Table from '../../../components/Table/Table';
import ReportService from '../../../services/ReportService';
import {
  TextField,
  Button,
  Grid,
  MenuItem,
  DialogContent,
  Divider,
  Select,
  InputLabel,
  Tooltip,
  IconButton,
} from "@mui/material";
import { DownloadAdhocViewModel, AdhocStatusDisplayNames, PaginatedList, AdhocStatus } from '../../../models/reportDTO';
import { SelectChangeEvent } from '@mui/material';
import Cookies from 'js-cookie';
import ToastService from '../../../utils/toast';
import { globalStyle } from '../../../styles/theme';
import Visibility from '@mui/icons-material/Visibility';
import { useNavigate } from 'react-router-dom';

const Dashboard: React.FC = () => {
  const Permission = Cookies.get('Permission') ?? "";
  const PermissionsReportsView = Permission.split(',').includes('"Permissions.Reports.View"')
  const [value, setValue] = useState(2);
  const [open, setOpen] = useState(false);
  const [formData, setFormData] = useState<DownloadAdhocViewModel>({
    dateFrom: new Date().toISOString(),
    dateTo: new Date().toISOString(),
    reportAdhoc: 2,
    rt: {
      coveredBranch: 0,
      employeeID: '',
    },
    pr: {
      employeeID: '',
    },
    ea: {
      exceptionStatus: 4,
    },
  });
  const [searchString, setSearchString] = useState<string>("");
  const [pagedResult, setPagedResult] = useState<PaginatedList>({
    data: [],
    pageIndex: 1,
    totalPages: 0,
    countData: 0,
    hasPreviousPage: false,
    hasNextPage: false,
  });

  const navigate = useNavigate();

  const columns = [
    {
      label: 'Action',
      render: (data: any) => (
        <Box sx={globalStyle.buttonBox}>
          <Tooltip title="Details">
            <IconButton color="primary"
              onClick={() => navigate(`/ReportsManagement/Dashboard/ReportDetails/${data.id}`)}
            >
              <Visibility />
            </IconButton>
          </Tooltip>
        </Box>
      ),
    },
    {
      label: 'Status',
      accessor: 'statusName',
    render: (data: any) => {
      let color;
      switch (data.statusName) {
        case 'Approved':
      color = 'green';
      break;
        case 'PendingApproval':
      color = 'orange';
      break;
      case 'Standby':
      color = 'blue';
      break;
        case 'Rejected':
      color = 'red';
      break;
        default:
      color = 'black';
      }
      return <span style={{ color }}>{data.statusName}</span>;
    },
    },
    {
      label: 'BR Code',
      accessor: 'selectedBranches',
    },
    {
      label: 'Category',
      accessor: 'reportCategoryName',
    },
    {
      label: 'Coverage',
      accessor: 'reportCoverageName',
    },
    {
      label: 'Date Coverage',
      render: (data: any) => new Date(data.coverageDate).toLocaleDateString('en-US'),
    },
    {
      label: 'Date Generated',
      render: (data: any) => new Date(data.dateGenerated).toLocaleDateString('en-US'),
    },
    {
      label: 'Generated By',
      accessor: 'createdBy',
    },
  ];

  const TabOnChange = (_event: React.SyntheticEvent, newValue: number) => {
    setValue(newValue);
    setFormData((prevFormData) => ({
      ...prevFormData,
      reportAdhoc: newValue, // Update reportAdhoc with the new value from the tab change
    }));
  };

  const InputOnChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement> | SelectChangeEvent<AdhocStatus>) => {
    const { name, value } = e.target;
    const keys = name.split('.'); // Split the name into keys to handle nested paths

    setFormData((prevState) => {
      const newState = { ...prevState };
      let current = newState;

      keys.forEach((key, index) => {
        if (index === keys.length - 1) {
          current[key] = value; // Update the actual value at the deepest level
        } else {
          if (!current[key]) {
            current[key] = {}; // Ensure nested objects are initialized if they don't exist
          }
          current = current[key]; // Move deeper into the nested structure
        }
      });
      return newState;
    });
  };

  const handleNestedChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement> | SelectChangeEvent<AdhocStatus>) => {
    // Use the `name` from the event directly, which is the key path
    InputOnChange(e);
  };

  function a11yProps(index: number) {
    return {
      id: `simple-tab-${index}`,
      'aria-controls': `simple-tabpanel-${index}`,
    };
  }

  const SubmitDownloadAdhoc = async (e: any) => {
    e.preventDefault();
    const response = await ReportService.downloadAdhoc(formData);
    const result = response.data;
    if (result.success) {
      const fileData = result.data;

      // Check if fileData is valid
      if (!fileData || !fileData.fileByte || fileData.fileByte.length === 0) {
        console.error('File byte data is empty or invalid');
        return;
      }

      // Decode base64 string to byte array
      const byteCharacters = atob(fileData.fileByte);
      const byteArray = new Uint8Array(byteCharacters.length);

      for (let i = 0; i < byteCharacters.length; i++) {
        byteArray[i] = byteCharacters.charCodeAt(i);
      }

      // Create a Blob object from the byte array
      const blob = new Blob([byteArray], { type: fileData.contentType });

      // Create a download link
      const link = document.createElement('a');
      link.href = URL.createObjectURL(blob);
      link.download = fileData.fileName;
      // Programmatically click the link to trigger the download
      link.click();

      // Clean up
      URL.revokeObjectURL(link.href);
      ToastService.success(result.message);
    } else {
      ToastService.error(result.message);
    }
  }

  const GetReportList = async () => {
    try {
      const result = await ReportService.getlist(
        searchString,
        pagedResult.pageIndex,
      );
      var x = result.data;
      setPagedResult({
        pageIndex: x.pageIndex,
        totalPages: x.totalPages,
        countData: x.countData,
        hasPreviousPage: x.hasPreviousPage,
        hasNextPage: x.hasNextPage,
        data: x.data,
      });
    } catch (error) {
      console.error("Error GetReportList", error);
    }
  };

  useEffect(() => {
    GetReportList();
  }, [pagedResult.pageIndex, searchString]);

  const handlePageChange = (newPage: number) => {
    setPagedResult({
      ...pagedResult,
      pageIndex: newPage,
    });
  };

  const SearchOnChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchString(e.target.value);
  };

  const SearchOnClick = () => {
    setPagedResult({
      ...pagedResult,
      pageIndex: 1,
    });
    GetReportList();
  };

  return (
    <>
      <h5 style={{ color: "#1976d2" }}>Reports Dashboard</h5>
      <h4 onClick={() => setOpen(!open)} style={{ cursor: 'pointer',color:'warning' }}>Download TAT/ADHOCS Reports<span style={{ color: 'gray' }}>(Click to hide/expand)</span></h4>
      {/* <Divider sx={{ bgcolor: "black" }} /> */}
      {open && (
        <Box sx={{ width: "100%" }}>
          <Box sx={{ borderBottom: 1, borderColor: "divider" }}>
            <Tabs
              value={value}
              onChange={TabOnChange}
              aria-label="basic tabs example"
              variant="fullWidth"
            >
              <Tab label="Regularization TAT" value={2} {...a11yProps(2)} />
              <Tab label="Pervasiveness" value={1} {...a11yProps(1)} />
              <Tab label="Exception Adhocs" value={4} {...a11yProps(4)} />
            </Tabs>
          </Box>

          <form onSubmit={SubmitDownloadAdhoc}>
            {/* Regularization TAT Tab */}
            {value === 2 && (
              <DialogContent sx={{ overflowY: "unset" }}>
                <Grid container spacing={2}>
                  <Grid item xs={4} sm={3}>
                    <InputLabel>Employee ID</InputLabel>
                    <TextField
                      autoComplete="off"
                      variant="outlined"
                      fullWidth
                      name="rt.employeeID"
                      value={formData.rt.employeeID}
                      onChange={handleNestedChange}
                      size="small"
                    />
                  </Grid>
                  <Grid item xs={4} sm={3}>
                    <InputLabel>Date From</InputLabel>
                    <TextField
                      autoComplete="off"
                      variant="outlined"
                      fullWidth
                      name="dateFrom"
                      type="date"
                      value={formData.dateFrom}
                      onChange={handleNestedChange}
                      size="small"
                    />
                  </Grid>
                  <Grid item xs={4} sm={3}>
                    <InputLabel>Date To</InputLabel>
                    <TextField
                      autoComplete="off"
                      variant="outlined"
                      fullWidth
                      name="dateTo"
                      type="date"
                      value={formData.dateTo}
                      onChange={handleNestedChange}
                      size="small"
                    />
                  </Grid>
                  <Grid item xs={3} sm={2} style={{ marginTop: "16px" }}>
                    <Button
                      type="submit"
                      variant="contained"
                      color="success"
                      size="large"
                    >
                      Download
                    </Button>
                  </Grid>
                </Grid>
              </DialogContent>
            )}

            {/* Pervasiveness Tab */}
            {value === 1 && (
              <DialogContent sx={{ overflowY: "unset" }}>
                <Grid container spacing={2}>
                  <Grid item xs={4} sm={3}>
                    <InputLabel>Employee ID</InputLabel>
                    <TextField
                      autoComplete="off"
                      variant="outlined"
                      fullWidth
                      name="pr.employeeID"
                      value={formData.pr.employeeID}
                      onChange={handleNestedChange}
                      size="small"
                    />
                  </Grid>
                  <Grid item xs={4} sm={3}>
                    <InputLabel>Date From</InputLabel>
                    <TextField
                      autoComplete="off"
                      variant="outlined"
                      fullWidth
                      name="dateFrom"
                      type="date"
                      value={formData.dateFrom}
                      onChange={handleNestedChange}
                      size="small"
                    />
                  </Grid>
                  <Grid item xs={4} sm={3}>
                    <InputLabel>Date To</InputLabel>
                    <TextField
                      autoComplete="off"
                      variant="outlined"
                      fullWidth
                      type="date"
                      name="dateTo"
                      value={formData.dateTo}
                      onChange={handleNestedChange}
                      size="small"
                    />
                  </Grid>
                  <Grid item xs={3} sm={2} style={{ marginTop: "16px" }}>
                    <Button
                      type="submit"
                      variant="contained"
                      color="success"
                      size="large"
                    >
                      Download
                    </Button>
                  </Grid>
                </Grid>
              </DialogContent>
            )}

            {/* Exception Adhocs Tab */}
            {value === 4 && (
              <DialogContent sx={{ overflowY: "unset" }}>
                <Grid container spacing={2}>
                  <Grid item xs={4} sm={3}>
                    <InputLabel id="coverage-label">Status</InputLabel>
                    <Select
                      size="small"
                      variant="outlined"
                      fullWidth
                      name="ea.exceptionStatus"
                      value={formData.ea.exceptionStatus}
                      onChange={handleNestedChange}
                      renderValue={
                        formData.ea.exceptionStatus
                          ? undefined
                          : () => "Select Exception Status"
                      }
                    >
                      {Object.values(AdhocStatus)
                        .filter((value) => typeof value === "number")
                        .map((status) => (
                          <MenuItem key={status} value={status}>
                            {AdhocStatusDisplayNames[status as AdhocStatus]}
                          </MenuItem>
                        ))}
                    </Select>
                  </Grid>
                  <Grid item xs={4} sm={3}>
                    <InputLabel>Date From</InputLabel>
                    <TextField
                      autoComplete="off"
                      size="small"
                      label=""
                      type="date"
                      variant="outlined"
                      fullWidth
                      name="dateFrom"
                      value={formData.dateFrom}
                      onChange={handleNestedChange}
                      required
                    />
                  </Grid>
                  <Grid item xs={4} sm={3}>
                    <InputLabel>Date To</InputLabel>
                    <TextField
                      autoComplete="off"
                      size="small"
                      type="date"
                      variant="outlined"
                      fullWidth
                      name="dateTo"
                      value={formData.dateTo}
                      onChange={handleNestedChange}
                      required
                    />
                  </Grid>
                  <Grid item xs={3} sm={2} style={{ marginTop: "16px" }}>
                    <Button
                      type="submit"
                      variant="contained"
                      color="success"
                      size="large"
                    >
                      Download
                    </Button>
                  </Grid>
                </Grid>
              </DialogContent>
            )}
          </form>
        </Box>
      )}
      {PermissionsReportsView && (
        <>
          <Divider sx={{ bgcolor: "black" }} />
          <h4 style={{ marginTop: 10 }}>Reports List</h4>

            <Grid container spacing={2} sx={{ marginBottom: 2 }}>
            <Grid item xs={3} sm={2}>
              <TextField
              label="Branch Code"
              fullWidth
              variant="outlined"
              size="small"
              value={searchString}
              onChange={SearchOnChange}
              />
            </Grid>
            <Grid item xs={3} sm={2}>
              <Button
              type="submit"
              variant="contained"
              color="success"
              size="large"
              onClick={SearchOnClick}
              >
              Search
              </Button>
            </Grid>
            </Grid>
          <Box>
            <Table columns={columns} data={pagedResult.data} />
          </Box>

          <PaginationControls
            currentPage={pagedResult.pageIndex}
            totalPages={pagedResult.totalPages ?? 0}
            onPageChange={handlePageChange}
            totalItems={pagedResult.countData}
          />
        </>
      )}
    </>
  );
}

export default Dashboard;
